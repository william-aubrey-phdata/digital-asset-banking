type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start:
      type: "start"
      transitions:
        unconditional:
        - "01 DQ_Test_Orchestration"
      parameters:
        componentName: "Start"
    "01 DQ_Test_Orchestration":
      type: "run-orchestration"
      transitions:
        success:
        - "Print Variables 3"
      parameters:
        componentName: "01 DQ_Test_Orchestration"
        orchestrationJob: "00 Data Ops/09 Testing/00 09 01 Data Quality Testing/01\
          \ DQ_Test_Orchestration.orch.yaml"
        setScalarVariables:
        - - "jv_FILE_KEY"
          - "Proximo_spirits_extract_fct.txt.gz"
        - - "jv_FILE_DATE"
          - "2024-12-10"
        - - "jv_PROCESS_STEP"
          - "LAND"
        setGridVariables:
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
        - - "jv_TEST_STATUS_OVERALL"
          - "${sysvar.childPipeline.vars.jv_TEST_STATUS_OVERALL}"
    If:
      type: "if"
      transitions:
        "true":
        - "Print Variables"
        "false":
        - "Print Variables 2"
      parameters:
        componentName: "If"
        mode: "Simple"
        condition:
        - - "jv_TEST_STATUS_OVERALL"
          - "Is"
          - "Equal to"
          - "PASS"
        combineConditions: "And"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Print Variables:
      type: "print-variables"
      parameters:
        componentName: "Print Variables"
        variablesToPrint:
        - - "jv_TEST_STATUS_OVERALL"
        prefixText: "SUCCESS!"
        includeVariableName: "Yes"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Print Variables 2:
      type: "print-variables"
      parameters:
        componentName: "Print Variables 2"
        variablesToPrint:
        - - "jv_TEST_STATUS_OVERALL"
        prefixText: "Huge failure, hang your head in shame."
        includeVariableName: "Yes"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Print Variables 3:
      type: "print-variables"
      transitions:
        success:
        - "If"
      parameters:
        componentName: "Print Variables 3"
        variablesToPrint:
        - - "jv_TEST_STATUS_OVERALL"
        prefixText:
        includeVariableName: "Yes"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
  variables:
    jv_TEST_STATUS_OVERALL:
      metadata:
        type: "TEXT"
        description: ""
        scope: "SHARED"
        visibility: "PUBLIC"
      defaultValue: "FRANKENSTEIN"
design:
  components:
    Start:
      position:
        x: -390
        "y": 0
      tempMetlId: 1
    "01 DQ_Test_Orchestration":
      position:
        x: -40
        "y": 0
      tempMetlId: 2
    If:
      position:
        x: 390
        "y": 0
      tempMetlId: 3
    Print Variables:
      position:
        x: 540
        "y": -50
      tempMetlId: 4
    Print Variables 2:
      position:
        x: 540
        "y": 70
      tempMetlId: 5
    Print Variables 3:
      position:
        x: 240
        "y": 0
      tempMetlId: 6
  notes:
    "1":
      position:
        x: -500
        "y": -230
      size:
        height: 408
        width: 300
      theme: "light-yellow"
      content: "Your job starts here."
    "2":
      position:
        x: 190
        "y": -230
      size:
        height: 408
        width: 510
      theme: "light-yellow"
      content: "... the remainder of your job happens here.  (These specific steps\
        \ are only illustrative)"
    "3":
      position:
        x: -180
        "y": -230
      size:
        height: 408
        width: 350
      theme: "green"
      content: "When you want to execute tests again either LAND (raw tables) or CLEAN\
        \ (clean views), call this orchestration with the following variables:\n\n\
        - jv_FILE_KEY \n- jv_FILE_DATE \n- jv_PROCESS_STEP\t= {LAND, CLEAN}"
    "4":
      position:
        x: -980
        "y": -220
      size:
        height: 528
        width: 460
      theme: "yellow"
      content: |-
        #### 00 Simulate Test Run

        ##### **Objective**

        This orchestration pipeline simulates running data quality tests for a specific file and process step.

        - Executes the data quality testing framework with predefined parameters
        - Demonstrates how to call the main DQ testing orchestration pipeline
        - Evaluates and displays the overall test status (PASS/FAIL)
        - Provides a simple example of how to integrate data quality testing into workflows

        ##### **Logic**

        1. **Test Execution**: The pipeline calls the "01 DQ_Test_Orchestration" pipeline with specific parameters:
           - File key: "Proximo_spirits_extract_fct.txt.gz"
           - File date: "2024-12-10"
           - Process step: "LAND"
        2. **Status Display**: After test execution, the pipeline displays the overall test status
        3. **Conditional Logic**: Based on the test status:
           - If PASS: Displays a success message
           - If FAIL: Displays a failure message

        ##### **Variables usage**
        |Variable | Purpose |
        |---------|---------|
        |jv_TEST_STATUS_OVERALL | Stores the overall status of all data quality tests (PASS/FAIL) |
        |jv_FILE_KEY | Identifies the file to be tested (set to "Proximo_spirits_extract_fct.txt.gz") |
        |jv_FILE_DATE | Specifies the date of the file being tested (set to "2024-12-10") |
        |jv_PROCESS_STEP | Indicates which processing stage to test (set to "LAND") |

        ##### **Maintenance**
        | ID | Topic | Maintenance Description |
        |----|-------|-------------------------|
        |M1| Parameter Updates | Update the file key, file date, and process step parameters as needed for different testing scenarios |
        |M2| Error Handling | Consider adding more robust error handling for cases where the child pipeline fails to execute |
        |M3| Integration | When integrating with other pipelines, ensure the variables are properly passed and handled |

        ##### **Improvement opportunities**
        | ID | Topic | Improvement Description |
        |----|-------|-------------------------|
        |I1| Parameterization | Convert hardcoded values to pipeline parameters to make the job more reusable |
        |I2| Detailed Reporting | Enhance the output to include more details about which tests failed and why |
        |I3| Notification Integration | Add notification components to alert stakeholders of test failures |
        |I4| Multiple File Testing | Extend the pipeline to test multiple files in sequence or parallel |
        |I5| Historical Tracking | Add components to track test results over time for trend analysis |
        |I6| UI Integration | Create a user interface for viewing and managing test results |
